#!/usr/bin/env python
# -*- coding: utf-8 -*-
# req8 - Easily reproduce HTTP requests
# Created by: Rafael Bodill <gmail:justRafi>
# License: GNU GPLv3
# Credits for Picker class: https://github.com/wong2/pick

import curses
import yaml
import json
import urllib.request
import urllib.parse
import argparse

DOC_NAME = '.requests.yml'
KEYS_ENTER = (curses.KEY_ENTER, ord('\n'), ord('\r'))
KEYS_UP = (curses.KEY_UP, ord('k'))
KEYS_DOWN = (curses.KEY_DOWN, ord('j'))
KEYS_SELECT = (curses.KEY_RIGHT, ord(' '))

parser = argparse.ArgumentParser()
parser.add_argument('-e', '--environment',
                    help='Specify environment\'s key name')
parser.add_argument('-s', '--show-headers', help='Show', action='store_true')
parser.add_argument('resource', nargs='?', help='Key name of resource')
parser.add_argument('request', nargs='?', help='Name of request')
args = parser.parse_args()


def _load_doc(filepath):
    try:
        with open(filepath, 'r') as f:
            return yaml.load(f.read())
    except yaml.YAMLError as ex:
        raise IOError('Unable to load .requests.yml, {}'.format(ex))


def _load_request(doc):
    resources = doc['resources']
    if args.resource is None:
        title = 'Choose a resource'
        options = [k for k, v in resources.items()]
        args.resource, index = Picker(options, title).start()

    if args.request is None:
        title = 'Choose a request'
        options = [k['name'] for k in resources[args.resource]['requests']]
        args.request, index = Picker(options, title).start()

    if args.environment is None:
        title = 'Choose an environment'
        options = [k for k, v in doc['environments'].items()]
        args.environment, index = Picker(options, title).start()

    resource = resources[args.resource]
    request = None
    for request in resource['requests']:
        if request['name'] == args.request:
            break

    state = doc['environments'].get(args.environment, {})
    return request, resource, state


def request(doc):
    request, resource, state = _load_request(doc)
    if request is None:
        raise IOError('Unable to find requested request')

    # URL
    method = request.get('method', 'GET')
    url = request['url'].format(**state)
    if '://' not in url:
        url = 'http://' + url

    # Headers
    headers = {}
    if 'headers' in resource:
        headers_name = resource['headers']
        for header in doc['headers'][headers_name]:
            parts = header.split(':')
            headers[parts[0].strip()] = parts[1].strip().format(**state)

    # Body data
    body = None
    if 'body' in request:
        body = json.dumps(request['body']).encode('utf8')

    # Query
    req = urllib.request.Request(
        url,
        data=body,
        headers=headers,
        method=method)

    return urllib.request.urlopen(req, timeout=5)


class Picker(object):
    """ Picker class to start a selection menu

    :param options: List of options to choose from
    :param title: (optional) Title above options list
    :param multi_select: (optional) if true its possible to select multiple
                                    values by hitting SPACE, defaults to False
    :param indicator: (optional) custom the selection indicator
    :param default_index: (optional) set this if the default selected option
                                     is not the first one
    """

    def __init__(self, options, title=None, indicator='=>',
                 default_index=0, multi_select=False, min_selection_count=0):

        if len(options) == 0:
            raise ValueError('options should not be an empty list')

        self.options = options
        self.title = title
        self.indicator = indicator
        self.multi_select = multi_select
        self.min_selection_count = min_selection_count
        self.all_selected = []

        if default_index >= len(options):
            raise ValueError(
                'default_index should be less than the length of options')

        if multi_select and min_selection_count > len(options):
            raise ValueError(
                'min_selection_count is bigger than the available options, '
                'you will not be able to make any selection')

        self.index = default_index
        self.custom_handlers = {}

    def register_custom_handler(self, key, func):
        self.custom_handlers[key] = func

    def move_up(self):
        self.index -= 1
        if self.index < 0:
            self.index = len(self.options) - 1

    def move_down(self):
        self.index += 1
        if self.index >= len(self.options):
            self.index = 0

    def mark_index(self):
        if self.multi_select:
            if self.index in self.all_selected:
                self.all_selected.remove(self.index)
            else:
                self.all_selected.append(self.index)

    def get_selected(self):
        """return the current selected option as a tuple: (option, index)
           or as a list of tuples (in case multi_select==True)
        """
        if self.multi_select:
            return_tuples = []
            for selected in self.all_selected:
                return_tuples.append((self.options[selected], selected))
            return return_tuples
        else:
            return self.options[self.index], self.index

    def get_title_lines(self):
        if self.title:
            return self.title.split('\n') + ['']
        return []

    def get_option_lines(self):
        lines = []
        for index, option in enumerate(self.options):
            if index == self.index:
                prefix = self.indicator
            else:
                prefix = len(self.indicator) * ' '

            if self.multi_select and index in self.all_selected:
                format = curses.color_pair(1)
                line = ('{0} {1}'.format(prefix, option), format)
            else:
                line = '{0} {1}'.format(prefix, option)
            lines.append(line)

        return lines

    def get_lines(self):
        title_lines = self.get_title_lines()
        option_lines = self.get_option_lines()
        lines = title_lines + option_lines
        current_line = self.index + len(title_lines) + 1
        return lines, current_line

    def draw(self):
        """draw the curses ui on the screen, handle scroll if needed"""
        self.screen.clear()

        x, y = 1, 1  # start point
        max_y, max_x = self.screen.getmaxyx()
        max_rows = max_y - y  # the max rows we can draw

        lines, current_line = self.get_lines()

        # calculate how many lines we should scroll, relative to the top
        scroll_top = getattr(self, 'scroll_top', 0)
        if current_line <= scroll_top:
            scroll_top = 0
        elif current_line - scroll_top > max_rows:
            scroll_top = current_line - max_rows
        self.scroll_top = scroll_top

        lines_to_draw = lines[scroll_top:scroll_top+max_rows]

        for line in lines_to_draw:
            if type(line) is tuple:
                self.screen.addnstr(y, x, line[0], max_x-2, line[1])
            else:
                self.screen.addnstr(y, x, line, max_x-2)
            y += 1

        self.screen.refresh()

    def run_loop(self):
        while True:
            self.draw()
            c = self.screen.getch()
            if c in KEYS_UP:
                self.move_up()
            elif c in KEYS_DOWN:
                self.move_down()
            elif c in KEYS_ENTER:
                if (self.multi_select and
                        len(self.all_selected) < self.min_selection_count):
                    continue
                return self.get_selected()
            elif c in KEYS_SELECT and self.multi_select:
                self.mark_index()
            elif c in self.custom_handlers:
                ret = self.custom_handlers[c](self)
                if ret:
                    return ret

    def config_curses(self):
        # use the default colors of the terminal
        curses.use_default_colors()
        # hide the cursor
        curses.curs_set(0)
        # add some color for multi_select
        # @todo make colors configurable
        curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_WHITE)

    def _start(self, screen):
        self.screen = screen
        self.config_curses()
        return self.run_loop()

    def start(self):
        return curses.wrapper(self._start)


def main():
    response = content = status = None
    headers = []
    try:
        doc = _load_doc('.requests.yml')
        response = request(doc)
        content = response.read()
        status = response.status
        headers = response.headers
        error = None
    except urllib.error.URLError as ex:
        status = ex.getcode()
        headers = ex.headers
        error = ex
    except IOError as ex:
        error = ex

    if args.show_headers:
        for header in headers:
            print('{}: {}'.format(header, headers[header]))
        print('HTTP Status: {}\n'.format(status))

    if error:
        print(error)

    if content:
        print(content.decode('utf-8'))


if __name__ == '__main__':
    main()
